<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[【19岁的生日】今年也要做一个大佬呀~]]></title>
      <url>/wifi9984.github.io/2018/08/04/birthday-19/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;牛批，又一年过去了。（然而去年今天没有写博客）</p>
<p>&emsp;&emsp;虽然19岁没有18岁来的含义丰富，但是今年是我家妹子第一次给我过生日~</p>
<a id="more"></a>
<h3 id="因为刚好遇见你"><a href="#因为刚好遇见你" class="headerlink" title="因为刚好遇见你"></a>因为刚好遇见你</h3><div align="center"><br>  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="80" src="http://dl.stream.qqmusic.qq.com/M800000LBcVm0d9raf.mp3?vkey=33B01BB60D23EC61E82464E3D40F114B98EF3D613A9BEE4F53B4BAD59949760AD632F970FF268C813F3CEBA53F2C4AB220E70BC263649FD9&guid=5150825362&fromtag=1"><br>  </iframe><br></div>

<p>&emsp;&emsp;// 也不知道播放器能不能用系列</p>
<p>&emsp;&emsp;今天是在一起第292天，说起来好像很快，也快要300天了，但是回过头看这300天，还是很充实的。</p>
<p>&emsp;&emsp;说起来也就一年，可是我们还是去了好多好多的地方，吃了<del>好多好多</del>东西……此处省略<code>undefined</code>个字符</p>
<p>&emsp;&emsp;早上看到那段视频真的很感动，虽然这是第一次用PR剪的片，<del>虽然剪辑有点粗糙，</del>但是我觉得已经很棒了。而且费了很多心思找了我想得到的和想不到的的朋友们。可以说很喜欢这份礼物了。mua~</p>
<p>&emsp;&emsp;</p>
<p>&emsp;&emsp;再过几天又是你的生日了，我可以把下一年的我也交给你（哎呀呀呀）</p>
<h3 id="相聚其实就是一种缘"><a href="#相聚其实就是一种缘" class="headerlink" title="相聚其实就是一种缘"></a>相聚其实就是一种缘</h3><p>&emsp;&emsp;过生日才会想起来，自己有太多太多的朋友。</p>
<p>&emsp;&emsp;最向往的生活就是和朋友们一起吃吃饭，聊聊天。</p>
<h3 id="一些愿望"><a href="#一些愿望" class="headerlink" title="一些愿望"></a>一些愿望</h3><h4 id="1-19岁也要和妹子一起走过"><a href="#1-19岁也要和妹子一起走过" class="headerlink" title="1. 19岁也要和妹子一起走过"></a>1. 19岁也要和妹子一起走过</h4><h4 id="2-要将蜗壳办公继续运营下去"><a href="#2-要将蜗壳办公继续运营下去" class="headerlink" title="2. 要将蜗壳办公继续运营下去"></a>2. 要将蜗壳办公继续运营下去</h4><h4 id="3-去广西旅行不要翻车"><a href="#3-去广西旅行不要翻车" class="headerlink" title="3. 去广西旅行不要翻车"></a>3. 去广西旅行不要翻车</h4><h4 id="4-变得更全能"><a href="#4-变得更全能" class="headerlink" title="4. 变得更全能"></a>4. 变得更全能</h4><h4 id="5-祝单身的朋友们早日脱单"><a href="#5-祝单身的朋友们早日脱单" class="headerlink" title="5. 祝单身的朋友们早日脱单"></a>5. 祝单身的朋友们早日脱单</h4><h4 id="……"><a href="#……" class="headerlink" title="……"></a>……</h4>]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生日 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【小程序开发经验分享·前篇】做完蜗壳办公后的一些感触]]></title>
      <url>/wifi9984.github.io/2018/06/06/weapp-summary-1/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;前不久刚刚磕完了一个微信小程序项目，创下了人生中的许多记录，还是很值的纪念的。</p>
<p><em>由于博客文章的TOC目录出了点偏差，先没做目录大家凑合着看先（一定会改的 TAT）</em></p>
<h2 id="关于这个项目"><a href="#关于这个项目" class="headerlink" title="关于这个项目"></a>关于这个项目</h2><h3 id="为什么要做这个"><a href="#为什么要做这个" class="headerlink" title="为什么要做这个"></a>为什么要做这个</h3><p>&emsp;&emsp;大概在3月中旬的时候，一天出门了在外面……回学校的路上山炮说有个比赛让我了解一下。emmmm，一开始其实我是拒绝的，一看到是小程序……就想起自己是个前端没有扎实的HTML + CSS + JS基础的，这一点其实在刚开始着手做的时候让我很害怕，怕两个月时间甚至都不够我学的。</p>
<p>&emsp;&emsp;好吧为什么动摇了呢？很简单……这毕竟是个腾讯霸霸举办的比赛啊，首先它有奖金（入围决赛的话低保6K，一等奖3W，特等奖10W），然后只要进决赛就拥有了腾讯入职的绿色通道，虽然官方没有做解释，但是分量差不多也相当于一份鹅厂的Offer了。主要是有钱啊兄弟！（如果能进决赛还能有深圳一周游呢）</p>
<a id="more"></a>
<h3 id="难点在哪里"><a href="#难点在哪里" class="headerlink" title="难点在哪里"></a>难点在哪里</h3><p>&emsp;&emsp;当然为了吹起来更好听一点，我们还是先讲讲做这个项目困难的地方吧：</p>
<h4 id="组队人数限制"><a href="#组队人数限制" class="headerlink" title="组队人数限制"></a>组队人数限制</h4><p>&emsp;&emsp;首先这个比赛一个组只有3个人……3个人其实很僵硬啊，我们数一下，一个标准配置的开发团队，有那么多的锅：<br><br>1、<strong>产品经理</strong>，负责产品各方面的规划，制定PRD（需求文档）<br><br>2、<strong>小程序前端开发</strong>，开发前端页面<br><br>3、<strong>后端开发</strong>，服务器端的开发，低配团队的话服务器运维也是他的锅<br><br>4、<strong>UI/UX</strong>，这个太关键了吧，程序员的直男审美要是去比赛分分钟刮刮死……<br><br>5、<strong>产品运营</strong>，运营是很容易被计算机专业的人忽略的，运营别提有多关键……而且比赛要求提供的介绍视频为了精致我们也需要运营来搞<br></p>
<p>&emsp;&emsp;然后对于我们这个零基础团队，开发似乎占了非常大的一口锅……所以最后是我跟山炮两个人背开发的锅，PM兼职UI/UX。由于用的后台是 LeanCloud 的服务，后端我们省去了，整个后台数据存储设计是我来做的。<em>顺便安利<a href="https://leancloud.cn" target="_blank" rel="external">LeanCloud 官网</a></em></p>
<p>&emsp;&emsp;总的来讲每个人背的锅都是很大的……而且还是零基础（唉三把辛酸泪）</p>
<p>&emsp;&emsp;欸，大一欸，大一欸！妈的提交之后在比赛群里看到一个老逼的项目介绍：<em>我们是一个研究生团队</em>…cnm我从来没受过这样的委屈.jpg（插入图片太麻烦我就不放了）</p>
<h4 id="时间限制（TLE）"><a href="#时间限制（TLE）" class="headerlink" title="时间限制（TLE）"></a>时间限制（TLE）</h4><p>&emsp;&emsp;3月30号报名，6月10号截止提交。不说了，时间真的很紧张。现在回头看都觉得之前是多么不可思议。而且**的实验班课还多一点的浪费了很多时间。而且我买了小本子都没时间做岩洞nmh啊……</p>
<h4 id="心理状况非常惨烈"><a href="#心理状况非常惨烈" class="headerlink" title="心理状况非常惨烈"></a>心理状况非常惨烈</h4><p>&emsp;&emsp;说实话做项目的这两个多月里面我们三个人心态都不是很健康……深受焦虑的困扰，感觉还是造成了不可逆转的精神摧残（智力-4）具体的也不在这里诉苦了，那段时间我的微博也有点惨（/捂脸）</p>
<p>&emsp;&emsp;总的来讲，我认为做这么个项目，要是过分考虑技术，你就已经凉了。在技术之外的事情，其实需要更多的精力去处理（技术上花的精力也不是瞎逼逼的比如说我的1.6W++ 1W–行代码……）</p>
<h3 id="后来怎么做成的"><a href="#后来怎么做成的" class="headerlink" title="后来怎么做成的"></a>后来怎么做成的</h3><p>&emsp;&emsp;别问，问就说因为牛逼。</p>
<p>&emsp;&emsp;其实也就是克服了这几点呗（真的很牛逼了）</p>
<h3 id="我想体验一下"><a href="#我想体验一下" class="headerlink" title="我想体验一下"></a>我想体验一下</h3><p>&emsp;&emsp;那你继续想吧。</p>
<p>&emsp;&emsp;其实小程序上线审核已经通过了，比赛结束后再上线吧（让Bug暴露于世）</p>
<h2 id="关于这系列笔记"><a href="#关于这系列笔记" class="headerlink" title="关于这系列笔记"></a>关于这系列笔记</h2><p>&emsp;&emsp;这系列风格跟我的Android文章一样，<strong>不是开发教程 而是经验分享</strong>。很少会涉及到长篇代码，主要是讲一些方法和技巧。如果你是个小白你可能啥都学不到，如果你是做<code>小程序</code>或者往大了讲做<code>web前端</code>的这会对你有一定的启发。（稍微diss一下890的那位安卓教程学长，写的入门教程还不如让入门的人自己看官方文档）</p>
<p>&emsp;&emsp;大致的内容如下：</p>
<p>&emsp;&emsp;前几篇主要是趁期末没事干的时候写一下心得，如果你想做项目的话可以参考一下，感觉能让你刚开始入门的时候心里有点逼数。就是关于项目怎么做，怎么跟别人协作的（哦还有一篇之前Git补坑教程……），做项目过程中各种 <strong>除技术外</strong> 的问题，除这篇外最多两篇吧。</p>
<p>&emsp;&emsp;然后就是会鸽<del>挺长</del>一阵子，到军训完放暑假的时候回家写一些前端有用的技巧。更新完大概会在空间挂一阵子吧，之前基本上都在微博转更新。（这时候就要安利你们一些技巧了！）</p>
<h2 id="掉粉时间"><a href="#掉粉时间" class="headerlink" title="掉粉时间"></a>掉粉时间</h2><p>&emsp;&emsp;如何把我的博客放到你的手机主页上呢？</p>
<h4 id="首先-用浏览器打开我的博客"><a href="#首先-用浏览器打开我的博客" class="headerlink" title="首先  用浏览器打开我的博客"></a>首先  用浏览器打开我的博客</h4><p><a href="https://wifi9984.github.io">传送门</a></p>
<h4 id="然后-选择添加网页到桌面"><a href="#然后-选择添加网页到桌面" class="headerlink" title="然后  选择添加网页到桌面"></a>然后  选择添加网页到桌面</h4><p><strong>小米用户</strong>：浏览器工具栏右下角的<code>三横</code>点一下 -&gt; <code>工具箱</code> -&gt; <code>添加快捷方式</code> -&gt; <code>手机桌面</code></p>
<p><strong>苹果用户</strong>：<code>Safari</code>浏览器打开博客 -&gt; 点击中间下部的<code>分享</code>按钮 -&gt; 选择<code>添加到主屏幕</code> -&gt; <code>添加</code></p>
<p><strong>其他安卓设备</strong>：emmmmm靠悟性或者百度吧。最好用<code>系统自带浏览器</code>打开</p>
<p><strong>别的途径</strong>：还记得我做的一个WebView APP么，安卓用户有兴趣的可以下载：<a href="https://github.com/wifi9984/wifi9984.github.io/releases/tag/1.1.4" target="_blank" rel="external">下载链接</a></p>
<h4 id="OJBK！"><a href="#OJBK！" class="headerlink" title="OJBK！"></a>OJBK！</h4><p>是不是非常方便，快去试试吧</p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 项目实践 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[属于全面屏的2018，却少了一份惊艳 —— 华为P20，小米MIX 2S真机体验]]></title>
      <url>/wifi9984.github.io/2018/04/21/mobile-phone-review/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;好久没更了，加上这学期报了鹅厂的小程序开发大赛，生活也挺忙的……今天去米家和华为店看了看两款热门的新机器。虽然只是好奇真机长啥样……但我最后还是忍不住想更一篇博客。</p>
<p>&emsp;&emsp;今年是2018，是各家旗舰纷纷换上全面屏的一年。在华为P20和小米MIX 2S之前，我们也以及看到了很多全面屏旗舰：OPPO热卖机型R11的全面屏版——R11s，以及后续的接班人OnePlus 5T…啊呸，OPPO R15；蓝厂vivo在MWC 2018秀出来的震惊四座的概念机vivo APEX；华为Mate系列的Mate 10 &amp; Mate 10 Pro；小米的第二代MIX；三星的S8以及延续版S9；当然还有水果家的iPhone X。<br><a id="more"></a></p>
<p>&emsp;&emsp;好吧下面开始MIX 2S和华为P20（P20 Pro）两款机器的正式测评</p>
<h3 id="小米MIX-2S"><a href="#小米MIX-2S" class="headerlink" title="小米MIX 2S"></a>小米MIX 2S</h3><p>&emsp;&emsp;在讲之前先分享一个很神奇的故事…今年小米MIX 2S第一轮开抢，线上还是日常秒没，燃鹅！燃鹅！燃鹅！我一个同学（嗯就是许大佬）去米家订的机器，第二天tmd就有了……这很奇怪，有两种可能：<br><br>&emsp;&emsp;1、小米一改线上缺货营销的策略，主攻线下，备货资源优先分配给了米家。<br><br>&emsp;&emsp;2、MIX 2S没人买，线上全tm是黄牛抢的。</p>
<p>&emsp;&emsp;emmmm这个就不展开了我也不知道是啥情况就是挺懵逼的</p>
<p>&emsp;&emsp;讲正事了啊，今年2S虽然在2的基础上没有很大的进步…但是毕竟也不low对吧（看看隔壁的菊花厂…）</p>
<p>&emsp;&emsp;MIX 2S这款机子…由于许大佬不肯把壳摘了…我今晚才摸到后盖，除了被人cao多了带来的油腻感…也就那样吧（裸机手感还没米6好…）可是！今年为啥只要一个款型…曾经的Unibody怎么变成了三明治了…这突如其来的金属中框是怎么回事？你们家的Unibody陶瓷机身呢？虽然我有一年没看手机了…但是这也太…无语了…</p>
<p>&emsp;&emsp;刚好，2S隔壁摆的就是2，顺手拉过来比了比…欸？一模一样…（外形上有极小的差距）</p>
<p>&emsp;&emsp;手感略差，反正我觉得这种大屏都挺不友好的，我的手握不过来。观感还是不错的，屏幕显示效果也很细腻。有一个小细节…MIX 2S自带主题的主屏时间显示…居然不是MIUI标配，而是仿S9的居中样式。其他的话，全面屏的交互还是很舒服的（毕竟是从水果那里学来的）。如果以前的旧手机卡的不行想换一个全面屏的话，MIX 2S居然仍然依然是最有性价比的旗舰款。（千元全面屏都是耍猴的…）</p>
<p>&emsp;&emsp;好吧后半段是我瞎BB的，实际上看到这个三明治设计之后我就把它丢了。</p>
<p>&emsp;&emsp;顺带一提，小米游戏本做工还行（屏幕转轴略蛋疼，其他细节还真的不错）。</p>
<h3 id="华为P20-amp-P20-Pro"><a href="#华为P20-amp-P20-Pro" class="headerlink" title="华为P20 &amp; P20 Pro"></a>华为P20 &amp; P20 Pro</h3><p>&emsp;&emsp;按照惯例啊，菊花厂的测评不会太长的。</p>
<p>&emsp;&emsp;P20那个薄膜干涉款后盖看上去挺不错的，然而线下店还没看到…</p>
<p>&emsp;&emsp;去年P10的Home键被我喷了，今年还是要喷的…刚摸完MIX 2S，拿起P20马上从底部上滑因为能返回主页，结果出来了个啥语音助手…菊花厂就不想想用惯了其他全面屏手机的人拿起这台P20无限唤醒语音助手有多蛋疼么…</p>
<p>&emsp;&emsp;当我一脸懵逼怎么返回主页的时候，我的手掌误触到了底部的Home键，返回了…返回了…我tm…然后我又试了一次…这次出来的居然是任务管理器…我TM…不说了不说了，体验极差。（P10用户可能表示海星）</p>
<p>&emsp;&emsp;P20的刘海比iPhone X还要长，虽然小了一点，但是系统UI的默认字体格外的小…观赏效果不佳，因为一个刘海的高度也就比一个APP icon低一丢丢…而且字是真的小，比刘海上的圆形听筒还小…导致我觉得这个刘海贼大…</p>
<p>&emsp;&emsp;丢了，走人</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;&emsp;离开手机店后我想了很久，今年最好的全面屏手机是哪一款。最后的结论是——去年无限不被我看好的iPhone X</p>
<p>&emsp;&emsp;我真的不是很想承认iPhone X是一款多么完美的手机，但是今年各厂失败的抄袭让我觉得，既然你们都喜欢刘海，那么iPhone X的设计确实比你们好看啊。曾几何时，OPPO R11s和华为Mate 10让我觉得S8这类的保留屏幕上下部分的设计才是2018年的主流，曾几何时iPhone X还是个小众设计。但是R15和P20…真的是打脸之作…还有其他的刘海屏，其实做的都不咋样。在刘海屏的机器里面，iPhone X还是最好看的。</p>
<p>&emsp;&emsp;那么没有刘海的呢？三星S9和小米MIX 2S。三星的旗舰永远只能惊艳一年，因为谁都知道三星明年的机器仍旧是这个样子，S6到S7，S8到S9。至于小米，也是不够惊艳，在MIX 2出来的时候甚至还有一点退步的感觉，至少现在2S发布也没有改变很大。有人说今年国产全面屏就是把水果X和S8从中间切开，有刘海又有下巴，这叫国产刘海屏；没刘海额头薄，这是小米MIX。虽然全面屏今年才刚刚普及，但是我觉得以及出现审美疲劳了，只能说智能手机确实也很难有大改变了。</p>
<p>&emsp;&emsp;还是很无语啊，iPhone X居然还没人出来制裁。</p>
<p>&emsp;&emsp;不说了，看大物去了。</p>
]]></content>
      
        
        <tags>
            
            <tag> 手机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Hexo博客更新-20180228】这个寒假的折腾记录]]></title>
      <url>/wifi9984.github.io/2018/02/28/blog-update-180228/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;正月十四，元宵快乐嗷~（台州人过的是十四）</p>
<p>&emsp;&emsp;这个寒假事情比较多，Android方面没有啥进展，倒是博客折腾了一会儿。在这里主要讲讲hugo和hexo的一些取舍，以及hexo主题的定制。<br><a id="more"></a><br><!-- TOC --></p>
<ul>
<li><a href="#1hugo的正确折腾方式">1.Hugo的<del>正确</del>折腾方式</a><ul>
<li><a href="#1-1hugo博客的搭建">1-1.Hugo博客的搭建</a></li>
<li><a href="#1-2hugo的主题库">1-2.Hugo的主题库</a></li>
<li><a href="#1-3我为什么放弃hugo">1-3.我为什么放弃Hugo</a></li>
</ul>
</li>
<li><a href="#2hexo主题yilia的完善">2.Hexo主题yilia的完善</a></li>
</ul>
<!-- /TOC -->
<h2 id="1-Hugo的正确折腾方式"><a href="#1-Hugo的正确折腾方式" class="headerlink" title="1.Hugo的正确折腾方式"></a>1.Hugo的<del>正确</del>折腾方式</h2><p>&emsp;&emsp;Hugo和Hexo都是时下比较流行的静态博客生成器，也还有Jekyll等……使用起来原理也就是一些主题的个性化配置，以及markdown文章的书写，然后就是用命令行生成网页并部署到服务端了。比起自己手写一个博客，使用静态博客显然是懒人的最佳选择。</p>
<p>&emsp;&emsp;Hugo是基于Go语言开发的，Hexo则基于Node.js开发。感觉也没有特别明显的差距。从时间上来看，Hugo的发布比Hexo晚，迭代也比Hexo快（最新的Hexo是在16年2约编译发布的）对于爱折腾的人来说，不体验一把Hugo也无法满足自己的好奇心红红火火恍恍惚惚哈哈……</p>
<h3 id="1-1-Hugo博客的搭建"><a href="#1-1-Hugo博客的搭建" class="headerlink" title="1-1.Hugo博客的搭建"></a>1-1.Hugo博客的搭建</h3><p>&emsp;&emsp;Hugo环境的搭建和Hexo差不多，按着文档来就可以了，至于Git，Go语言包之类的工具…对程序员来说也是小事情了。折腾过Hexo的话用不了几分钟就能搭好。<a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="external">Hugo QS文档</a></p>
<p>&emsp;&emsp;在Hugo的Sites目录下是你创建的所有站点，站点目录下有一些文件夹，其中<code>content</code>是存放页面和文章的目录，<code>static</code>存放各种静态资源，<code>themes</code>存放主题，<code>public</code>存放生成后的网页内容。</p>
<h3 id="1-2-Hugo的主题库"><a href="#1-2-Hugo的主题库" class="headerlink" title="1-2.Hugo的主题库"></a>1-2.Hugo的主题库</h3><p>&emsp;&emsp;Hugo的建站流程很简单，与Hexo不同的是，Hugo没有默认主题，只有从Git上下载。Hugo官网提供的主题比Hexo要多。但是从民间资源来看，Hugo的中文主题没有Hexo的好看……</p>
<p>&emsp;&emsp;有段时间我把Hugo部署到GitHub Page上取代了Hexo，用的主题是<code>hugo-future-imperfect</code>（<a href="https://themes.gohugo.io/theme/future-imperfect/" target="_blank" rel="external">demo预览</a>）</p>
<p>&emsp;&emsp;然而，当我用了这款主题之后，我发现对于中文的支持并不好，斜体的Markdown解析会出现问题…也有挺多的小Bug，但是要找一款完美的主题实在是太难了，忍忍就算了。</p>
<h3 id="1-3-我为什么放弃Hugo"><a href="#1-3-我为什么放弃Hugo" class="headerlink" title="1-3.我为什么放弃Hugo"></a>1-3.我为什么放弃Hugo</h3><p>&emsp;&emsp;首先，生成并部署网页，在Hexo里我只需要<code>hexo g -d</code>，只要在<code>_config.yml</code>里面设置好<code>deploy</code>就可以一句话完成操作，而Hugo则是要手动进行Git操作，对懒癌患者不太友好。</p>
<p>&emsp;&emsp;and，Hugo的主题看上去茫茫多，但是没有一个用起来称心如意的，还是有点失望的。</p>
<p>&emsp;&emsp;最后，Hugo迭代很勤快，大概是不稳定吧……还是Hexo这样稳定的工具用起来更舒服</p>
<h2 id="2-Hexo主题yilia的完善"><a href="#2-Hexo主题yilia的完善" class="headerlink" title="2.Hexo主题yilia的完善"></a>2.Hexo主题yilia的完善</h2><p>&emsp;&emsp;最后我终于被Hugo搞烦了，换回了Hexo，捡回了原来的主题<code>yilia</code>（<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia传送门</a>）</p>
<p>&emsp;&emsp;从GitHub的PR和issue来看，yilia的作者litten已经把这个主题凉了很久了……好在PR里面有一些bug的修复，可以手动打上。</p>
<p>&emsp;&emsp;yilia的源码（sass文件、js文件和ejs文件）在<code>source-src</code>里面，如果修改的话需要重新编译，编译后的css文件和js文件会在<code>source</code>里面。</p>
<p>&emsp;&emsp;如果只是修改某个参数的话，可以先启动本地服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;然后用chrome打开后打开开发者工具（F12），可以看到解析后的css（源文件css是压缩的，没有缩进<del>不要慌问题不大</del>），找到对应的字段，在<code>source</code>的<code>main-xxxxxx.css</code>里面搜索字段，修改相应的数据。</p>
<p>&emsp;&emsp;<strong>然后</strong>，保存后先清除<code>public</code>文件夹下的旧文件，再执行<code>hexo g -d</code>，就可以更新主题了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g -d</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;今天的不定期诈尸就到这里了，马上又要回学校了，又没时间折腾了，掰掰掰掰，给大家拜早年了。</p>
]]></content>
      
        <categories>
            
            <category> Blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 折腾 </tag>
            
            <tag> Hugo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android学习经验分享·5】如何优雅和其他单身程序员交流代码]]></title>
      <url>/wifi9984.github.io/2017/12/29/android-git/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;好像上一次更新博客是三个月…..emmmm快四个月前了。趁元旦放假写一篇<del>水帖</del>干货。顺便证明一波这个博客还没有凉。</p>
<p>&emsp;&emsp;这次讲讲Git这个神奇的东西。然后讲解Android Studio自带的VCS工具的GitHub的使用好了。GitHub是一个全球最大程序员<del>同性</del>交友网站…..emmm…..好吧，如果你新建了一个Project，有时候你可能需要和别人交流代码啥的….这时候有一个GitHub仓库就很方便了。</p>
<p>&emsp;&emsp;点击查看如何正确交♂友<br><br>&emsp;&emsp;长文预警！</p>
<a id="more"></a>
<!-- TOC -->
<ul>
<li><a href="#1git是啥">1.Git是啥？</a></li>
<li><a href="#2github是啥">2.GitHub是啥？</a></li>
<li><a href="#3android-studio的项目怎么管理">3.Android Studio的项目怎么管理？</a><ul>
<li><a href="#3-1添加项目到github">3-1.添加项目到GitHub</a></li>
<li><a href="#3-2修改操作commitpush">3-2.修改操作commit&amp;push</a></li>
<li><a href="#3-3和别人一起做项目占坑">3-3.和别人一起做项目（占坑）</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->
<p>&emsp;&emsp;emmmm….为什么这么久没有更新….首先是，真的也没有人看，好吧真的没人看，如果你看到了不妨扫一扫赞赏二维码请我喝一杯奶茶…..</p>
<p>&emsp;&emsp;好吧真实的原因是….学业繁忙哈哈哈哈，告辞告辞。</p>
<p>&emsp;&emsp;不皮了，上正文。</p>
<h2 id="1-Git是啥？"><a href="#1-Git是啥？" class="headerlink" title="1.Git是啥？"></a>1.Git是啥？</h2><p>&emsp;&emsp;如果你知道Git是啥的话就<a href="#jump"><code>跳过</code></a>这一节….</p>
<p>&emsp;&emsp;“Git是一个开源的分布式版本控制工具…..”欸等等我听不懂啊！[/摔!]</p>
<p>&emsp;&emsp;其实就是一个托管代码的东西……首先要做项目的话，版本肯定要迭代的，版本迭代就需要管理嘛，通过Git可以对代码仓库进行一系列的操作，写好了没毛病的就从本地仓库push到远程仓库上去，就可以用了（比如GitHub Page）</p>
<p>&emsp;&emsp;- 为什么要放到仓库上去呢？<br><br>&emsp;&emsp;<del>当然是让别人赞扬你啦</del></p>
<p>&emsp;&emsp;基本上开发都是需要协作的，这么多代码你一个人写的话，万一你跳槽走人了，公司别的人对你的老代码将无从下手（除非你注释写得非常到位….）不仅仅是公司，就算是个人做项目，也可以通过Git管理你写的代码，比如说，这次写着写着写炸了，在IDE里面撤销基本上不可能了，通过Git就可以revert上一个版本的代码。牛逼不牛逼？</p>
<p>&emsp;&emsp;代码也是需要管理的，从一开始就养成管理代码的好习惯，会省力很多。（一个项目坐下来看看commit的次数也是蛮有成就感的嘛对吧）</p>
<h2 id="2-GitHub是啥？"><a href="#2-GitHub是啥？" class="headerlink" title="2.GitHub是啥？"></a>2.GitHub是啥？</h2><p>&emsp;&emsp;GitHub是一个基于Git的代码交流社区。不仅仅是个人开发者在GitHub上托管代码，这个社区里面还有相当多高质量的开源项目，clone下来学习学习也挺好的，大多数东西还可以直接用的。</p>
<p>&emsp;&emsp;GitHub的功能还有很多啦，反正是全英文的，注册一个账号去里面探索一下也不错啊~<br><span id="jump"></span></p>
<h2 id="3-Android-Studio的项目怎么管理？"><a href="#3-Android-Studio的项目怎么管理？" class="headerlink" title="3.Android Studio的项目怎么管理？"></a>3.Android Studio的项目怎么管理？</h2><h3 id="3-1-添加项目到GitHub"><a href="#3-1-添加项目到GitHub" class="headerlink" title="3-1.添加项目到GitHub"></a>3-1.添加项目到GitHub</h3><p>&emsp;&emsp;不慌，首先在你的电脑上安装Git<a href="https://git-scm.com/downloads" target="_blank" rel="external">下载Git</a>。</p>
<p>&emsp;&emsp;打开建好的Project，在AS工具栏找到<code>VCS</code> -&gt; <code>Import into Version Control</code> -&gt; <code>Share Project on GitHub</code><br><img src="https://github.com/wifi9984/wifi9984.github.io/blob/master/img/share_project_1.png?raw=true" alt="Share Project - 1"><br>&emsp;&emsp;这时候需要登录GitHub。然后为仓库命名以及添加说明。<br><img src="https://github.com/wifi9984/wifi9984.github.io/blob/master/img/share_project_2.png?raw=true" alt="Share Project - 2"><br>&emsp;&emsp;点击<code>Share</code>，等待进度条走完，打开GitHub主页，就可以看到传上去的仓库了。<br><img src="https://github.com/wifi9984/wifi9984.github.io/blob/master/img/share_project_3.png?raw=true" alt="Share Project - 3"></p>
<p>&emsp;&emsp;看到没，完全OjbK！</p>
<h3 id="3-2-修改操作commit-amp-push"><a href="#3-2-修改操作commit-amp-push" class="headerlink" title="3-2.修改操作commit&amp;push"></a>3-2.修改操作commit&amp;push</h3><p>&emsp;&emsp;项目已经托管到GitHub上面了，如果要同步你的更改，只要<code>commit\&amp;push</code>就可以了。</p>
<p>&emsp;&emsp;在AS导航栏<code>VCS</code> -&gt; <code>Commit Changes</code>点击会出现一个这样的窗口。需要填写作者ID\&amp;邮箱，勾选更改的文件，添加更改说明。写完后选择<code>Commit and Push</code>，以此按提示选项走，就OK了。<br><img src="https://raw.githubusercontent.com/wifi9984/wifi9984.github.io/master/img/commit.png" alt="commit"><br><img src="https://raw.githubusercontent.com/wifi9984/wifi9984.github.io/master/img/push.png" alt="push"><br><img src="https://raw.githubusercontent.com/wifi9984/wifi9984.github.io/master/img/push_after.png" alt="view commits"></p>
<h3 id="3-3-和别人一起做项目（占坑）"><a href="#3-3-和别人一起做项目（占坑）" class="headerlink" title="3-3.和别人一起做项目（占坑）"></a>3-3.和别人一起做项目（占坑）</h3><p>&emsp;&emsp;占坑。以后再写。涉及到Pull Request，Branch，Merge，Revert……</p>
<p>&emsp;&emsp;emmmm先这样凑合把，我又要凉一阵子了（逃）</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 学习 </tag>
            
            <tag> 分享 </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[震惊！短短几行代码搞定个人博客APP]]></title>
      <url>/wifi9984.github.io/2017/09/07/android-app-myblog/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;说出来你估计也信，我用不到1小时的时间搭出了一个个人博客的APP。</p>
<p>&emsp;&emsp;再骚一点，全程的手打代码居然不超过<strong>50行</strong>！<br><a id="more"></a></p>
<p>&emsp;&emsp;emmmm….好吧其实过程无比简单，只是利用了<strong>WebView</strong>控件。</p>
<p>&emsp;&emsp;先给你们看看效果：</p>
<p><img src="https://raw.githubusercontent.com/wifi9984/wifi9984.github.io/master/img/android-app-blog-main.jpg" alt="主界面"></p>
<p>&emsp;&emsp;要实现上面的效果，其实非常简单。</p>
<h2 id="1-创建Project"><a href="#1-创建Project" class="headerlink" title="1.创建Project"></a>1.创建Project</h2><p>&emsp;&emsp;打开功能健全的Android Studio，new一个project。导入模板的时候选择<code>empty activity</code>就可以了。</p>
<h2 id="2-设置Style"><a href="#2-设置Style" class="headerlink" title="2.设置Style"></a>2.设置Style</h2><p>&emsp;&emsp;首先来到布局文件<code>activity_main.xml</code>，直接把根节点设置为WebView，宽高肯定都是match_parent了，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">WebView</span></span></div><div class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/web_blog"</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line">&lt;/WebView&gt;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这样就在主界面整个窗体上放了一个WebView控件。但是我们回到设计视图，发现窗口还有Action Bar……这就需要用一些手段来去除这个东西了。</p>
<p>&emsp;&emsp;打开<code>MainActivity.java</code>，我们要做的就是先把MainActivity声明里面的继承修改一下。默认是<code>AppCompatActivity</code>（默认带标题）修改为<code>Activity</code>。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;然后在onCreate()方法里面写上（先后关系不能乱哦）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">setContentView(R.layout.activity_main);</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这样调试一下就看到Action Bar已经消失了，WebView已经铺满了整个页面。但是，状态栏颜色还是不和谐。我的解决方法是在<em>colors.xml</em>里面把<em>colorPrimaryDark</em>修改为我的网页的顶部颜色。</p>
<p>&emsp;&emsp;这样一来再去调试发现和谐了一些。那接下来去加载一下WebView</p>
<h2 id="3-加载网页"><a href="#3-加载网页" class="headerlink" title="3.加载网页"></a>3.加载网页</h2><p>&emsp;&emsp;WebView的加载很简单，只需在onCreate()方法里添加几行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化控件</span></div><div class="line">web_blog = findViewById(R.id.web_blog);</div><div class="line"><span class="comment">//通过loadUrl()方法来设置需要加载的网页</span></div><div class="line">web_blog.loadUrl(<span class="string">"https://wifi9984.github.io"</span>);</div><div class="line"><span class="comment">//这个方法必须要写</span></div><div class="line">web_blog.setWebViewClient(<span class="keyword">new</span> WebViewClient());</div><div class="line"><span class="comment">//如果网页中包含JavaScript的话需要允许运行js</span></div><div class="line">WebSettings settings = web_blog.getSettings();</div><div class="line">settings.setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这样再去调试一遍呢？Ooooops！为什么无法加载？？？</p>
<p>&emsp;&emsp;道理很简单…我们还需要在Manifest.xml里面添加联网权限许可……<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>需要注意的是，uses-permission需要添加在application节点上面！</strong></p>
<h2 id="4-其他小bug"><a href="#4-其他小bug" class="headerlink" title="4.其他小bug"></a>4.其他小bug</h2><p>&emsp;&emsp;首先，在滑动网页的时候我们会发现滑倒顶或者到底都会出现<strong>阴影动效</strong>。我个人感觉有点影响美观。很简单，在xml里面可以去掉。直接在WebView节点下设置<code>fadingEdge</code>和<code>overScrollMode</code>。完成后如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">WebView</span></span></div><div class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/web_blog"</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:fadingEdge</span>=<span class="string">"none"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:overScrollMode</span>=<span class="string">"never"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">WebView</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;然后是用户体验的bug，就是<strong>默认情况下按返回键是直接退出APP回到系统界面的</strong>，我们同样需要修改这个操作。</p>
<p>&emsp;&emsp;方法也比较简单，在<code>MainActivity.java</code>里，覆盖onKeyDown的方法。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.KEYCODE_BACK)&#123;</div><div class="line">            <span class="keyword">if</span>(web_blog.canGoBack())&#123;</div><div class="line">                web_blog.goBack();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.exit(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这样就可以了。<strong>但是，但是，但是！</strong>如果你的网页有<strong>侧边栏</strong>的话，在网页主页打开侧边栏的情况下，<strong>canGoBack依然为false</strong>，这个时候单击后退键还是会退出APP。我用浏览器访问了一些类似的网站，发现都是同样的情况。于是我尝试让APP实现<strong>双击后退键才能退出</strong>。修改后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先用一个long变量firstTime记录第一次点击返回键的时间</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> firstTime = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getAction() == KeyEvent.ACTION_DOWN)&#123;</div><div class="line">            <span class="keyword">if</span>(web_blog.canGoBack())&#123;</div><div class="line">                web_blog.goBack();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 设置2000毫秒作为响应双击的延时</span></div><div class="line">                <span class="keyword">if</span> (System.currentTimeMillis()-firstTime&gt;<span class="number">2000</span>)&#123;</div><div class="line">                    <span class="comment">//来一个简单的Toast提示用户</span></div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"再按一次返回就退出了喔~"</span>,</div><div class="line">                                   Toast.LENGTH_SHORT).show();</div><div class="line">                    firstTime=System.currentTimeMillis();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    finish();</div><div class="line">                    System.exit(<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;修改后在Navigation手抖点击返回之后就是这个样子：<br><img src="https://raw.githubusercontent.com/wifi9984/wifi9984.github.io/master/img/android-app-blog-navigation.jpg" alt="修改后的Toast提示"></p>
<p>&emsp;&emsp;哇，心情舒畅~就这样啦，弄好了~收工咯~（内测哈哈哈下载链接以后估计会直接贴在主页上吧~）</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> APP </tag>
            
            <tag> WebView </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android学习经验分享·4】如何快速理解Andoid开发原理-1-布局]]></title>
      <url>/wifi9984.github.io/2017/08/22/android-layout/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;8-22填坑。这十几天里，闭关了几天研究SQLite，又出去旅行了一周，所以拖更了QAQ</p>
<p>&emsp;&emsp;刚开始接触Android开发的时候，如果高中有做过Visual Basic程序设计，就很容易理解所谓的面向对象编程。</p>
<a id="more"></a>
<p>&emsp;&emsp;以高中教科书里的VB为例，VB工程的控件都在一个窗体（Form）里面，控件的实例化需要定义各种属性（比如name，caption，visible….），我们可以针对每个控件创建事件处理代码，比如command1_click。学过VB的同学可以好好回忆一下.</p>
<p>&emsp;&emsp;在Android里面，工程就是你创建的package（app），窗体可以粗略理解为Activity，控件就是Button，TextView，ImageView……然后，VB里的事件代码，在Android里通过Java代码实现（Kotlin语言目前还没有广泛使用）</p>
<p>——–分割线——–</p>
<p>&emsp;&emsp;与VB不同的是，VB窗体可以通过自带网格参考线来定义布局，而Android应用为了适应不同尺寸以及分辨率的显示屏，需要用严谨的布局方式，也就是LinearLayout，RelativeLayout……通过设定布局形式来在不同屏幕上呈现相同的效果<code>知识点：dp的概念</code>。其中的原理就是：VB的窗体可以自由调整大小，大小以px（像素）计算。而手机上，APP默认就是铺满整个屏幕的。而手机屏幕也很复杂，不仅有4.7，5.0，5.5这样的尺寸，也有720P，1080P，2K这样的分辨率。</p>
<p>&emsp;&emsp;假如用px作为单位，会出现好多问题。</p>
<p>&emsp;&emsp;问题一：如果你开发的时候设计的是1080P的分辨率，那么这款APP在720P的显示屏上运行的时候，由于分辨率的限制，就无法显示完整的内容，如果在2K屏上运行，就会有一片空白区域。</p>
<p>&emsp;&emsp;问题二：如果你开发的时候也用1080P，那么在5.5英寸1080P屏幕和5.0寸1080P屏幕上面，整个界面是被按比例缩放的，一个100*60px的按钮，在两个屏幕上的大小就不一样了。</p>
<p>&emsp;&emsp;解决方法：引入dp的概念。dp=dip:<em>device independent pixels</em>(设备独立像素)，如果一个设备显示屏幕的像素密度为160ppi，那么1dp刚好对应1px。按照比例关系，像素密度越高的屏幕，1dp对应的像素点越多。这样有一个很直接的好处就是，创建一个100*60dp的按钮，放到不同ppi的屏幕下，显示出来的大小是几乎一样的（至于为什么是几乎，可以去了解一下知乎里面的一个问题<a href="https://www.zhihu.com/question/20697111" target="_blank" rel="external">传送门</a>）</p>
<p>&emsp;&emsp;顺便解释一下上面提到的两个非常常用的基本布局：LinearLayout，RelativeLayout。LinearLayout翻译过来是<strong>线性布局</strong>，就是大致确定布局内部的控件排列方向为横向或者纵向。RelativeLayout翻译过来是<strong>相对布局</strong>，可以确定控件与布局四边的位置和与指定一个控件的相对位置。很多时候这些Layout都是内部<strong>嵌套</strong>着Layout的。用于呈现复杂的UI界面。</p>
<p>&emsp;&emsp;理解上面几段文字后你大概就明白了为什么布局设计要如此严谨了。以后当你发现Android Studio模拟设备和你手上的真机显示效果不一样时，记得回到XML文件里面去分析一下自己的布局是否严谨。</p>
<p>&emsp;&emsp;今天就先讲这么一小段吧。后续还会有针对控件的解读（涉及Java类的继承）和针对源码书写（涉及Java语法）的解读。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 学习 </tag>
            
            <tag> 分享 </tag>
            
            <tag> Android布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android崩溃经验分享·1】有句妈卖皮我一定要讲]]></title>
      <url>/wifi9984.github.io/2017/08/07/android-bug-fragment/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;怒更！讲道理今天码代码码得有点爆炸，本来想给自己放个假的，但是转念一想记录一下崩溃经验也蛮有意思的。开始吧。</p>
<a id="more"></a>
<p>&emsp;&emsp;出于功能和审美需求，我在new这个project的时候就引用了Navigation Drawer Activity这个模板。emmm….一波设计之后的UI是这样的（这个是下午的版本，还能run的）</p>
<p><img src="https://raw.githubusercontent.com/wifi9984/wifi9984.github.io/master/img/android-bug-1-1.jpg" alt="Navigation页面"><br><img src="https://raw.githubusercontent.com/wifi9984/wifi9984.github.io/master/img/android-bug-1-2.jpg" alt="Home页面"></p>
<p>&emsp;&emsp;稍微讲解一下，Navigation Drawer就是侧滑出来的这个菜单，菜单里面的各项用于打开各个页面。可以是跳转到Activity，也可以是Fragment。</p>
<p>&emsp;&emsp;刚创建的ND Activity的layout目录下包含了复杂的app_bar_main,content_main,activity_main……其中有着各种<code>include</code>关系（这个我刚开始理解了好一阵子，后来发现就是包含关系。仔细看XML文件里面都写了这么一行<code>include layout xxxx</code>）。一开始被这些东西弄得云里雾里，连上面的样式都是反反复复修改了n天才琢磨出来的。</p>
<p>&emsp;&emsp;<strong>然后问题就来了！</strong></p>
<p>&emsp;&emsp;我设计的结构：<code>activity_main include</code> (<code>app_bar_main</code> + <code>content_main</code>)。看似没什么问题，实际上我首页的各种<strong>事件响应和处理代码</strong>都写在了<strong>MainActivity</strong>里面。单一页面的时候当然发现不了问题啦。<br>&emsp;&emsp;then，我下午搞定了SQLite数据库的创建和写入，于是想顺便在Navigation Drawer里面做一个专门用来debug的Activity，思路当然是用<code>Intent</code>然后<code>startActivity(Intent)</code>。这一切下来简直不能再6，可是这时候我最没重视的<strong>ToolBar</strong>出来搞事情了。</p>
<p>&emsp;&emsp;当我使用<strong>AppCompatActivity</strong>来实现这个<strong>debugActivity</strong>的时候，我发现主界面显示的ToolBar上面的Toogle不见了，然后我试着滑动拖出Navigation Drawer，但是我发现并不行！原因是，Navigation Drawer在MainActivity里面，而现在应用已经跳转到了另一个Activity，自然就无法继续使用Navigation Drawer了。怎么办呢？百度了以后我才知道原来正确的实现方式是用Fragment。<br><br>&emsp;&emsp;稍作解释：Fragment就是一个片段，Activity则是一个完整的活动，Activity里面可以灵活引用Fragment。</p>
<p>&emsp;&emsp;一开始我看Fragment是高级的东西，就没有想到用它，现在后悔了。于是，重新规划了APP的架构。</p>
<p>&emsp;&emsp;新架构如下：Navigation Drawer作为页面切换的工具，默认展示在首页的是“所有事项”这个Fragment。然后页面的切换就调用<strong>Fragment的切换</strong>来实现。原理是这样的，这些Fragment的调用代码都写在MainActivity里面，MainActivity的Navigation Drawer作为导航，ToolBar的代码则是原封不动，只是添加了一些功能性的代码用于更改标题和变化ToolBar上的功能按钮。（这才是正确思路）</p>
<p>&emsp;&emsp;然后我的工程就开始了，我需要把原本<code>content_main</code>的各种被include关系全都拆掉，然后在activity_main里面腾出空间，利用代码让Fragment展示出来。嗯…..说出来简单，但是做事情要考虑到历史的进程….这些工程目前耗费了我一个半小时…..对，目前….因为我还没有完成，这个APP目前还不能run…..妈卖皮……</p>
<p>&emsp;&emsp;祝愿后人能少走些弯路。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bug </tag>
            
            <tag> 心态爆炸 </tag>
            
            <tag> Fragment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android学习经验分享·3】对于Activity的解读]]></title>
      <url>/wifi9984.github.io/2017/08/06/android-activity/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;续。前几天是18周岁生日，偷懒了一阵子。今天继续填坑。<br>&emsp;&emsp;今天准备讲几个刚入门就会碰到但是概念又很深奥难懂的几个名词。</p>
<a id="more"></a>
<h2 id="1、Activity"><a href="#1、Activity" class="headerlink" title="1、Activity"></a>1、Activity</h2><p>&emsp;&emsp;这单词我也知道啊是活动的意思，但是它在Android里面起到哪些作用呢？为什么会用Java语言来书写呢？Activity的生命周期有哪些用途呢？我们一一理解。</p>
<p>&emsp;&emsp;首先，Activity在Android中的作用就是呈现一个屏幕给用户。通常情况下MainActivity呈现的是我们应用的主页。比如说，我们在主页上面放置一个按钮，点击按钮之后让应用跳转到指定的页面。这里就有两个Activity，一个是主页的MainActivity，另一个是跳转到的目标Activity。粗浅地理解的话，Activity相当于一个模块，多个Activity组合起来形成了一个具有完整功能的APP。从代码来分析，Activity的<code>onCreate</code>方法中必须要有一行：<code>setContentView(R.layout.xxx);</code> 这行代码就是把这个Activity连接到我们做好的一个layout里面，从而展示这个layout。我们日常使用APP中碰到的多数页面跳转的场景，就是Activity之间的跳转。</p>
<p>&emsp;&emsp;那么，为什么Activity会放在<code>src/java</code>目录下呢？我们学习的Java基础就是用来在Activity里面完善Activity的各种功能。其中涉及到Activity的继承、控件的继承……继承这个词是Java这一面向对象的编程语言的一大特征，Android的各种功能，都是基于Java来运行的。有Java基础的同学应该都知道Java可以定义很多个“类”，类可以被继承。从源代码来看，Activity继承自<strong>Context</strong>（这也是个很重要的点，以后要解释的），Context的父类是Object，Object是Java所有类的祖先。所以可以看到Activity本质上就是Java的一个类。所以用Java来书写。</p>
<p>&emsp;&emsp;（拓展一下下）那么，<code>src/java</code>目录下全部都是Activity么？当然不是。类是可以创造的，我们可以写一个类，把不同Activity需要用到的功能函数写在这个类里面，再到Activity里面去调用这些函数，这样就减少了相同代码的重复书写。我们也可以public一个自定义控件，在自定义控件里面自由发挥，这样才能实现种种复杂的UI界面。</p>
<p>&emsp;&emsp;那么，Activity的生命周期如何理解呢？生命周期的图表示起来很复杂，但是实际用到就很好理解了。还是一开始的例子，从MainActivity跳转到指定的Activity后，MainActivity暂时没有什么卵用了，如果再把它作为活动Activity的话，就白白占用系统资源了，所以会执行onStop()，或者也可以根据场景选用onPause()。你可能觉得反正现在硬件这么厉害，这样应该没什么吧。这显然是不可能的，如果不把东西搬到后台，开几个程序系统就吃不消了，所以系统有一个完整的管理机制，就是生命周期。<strong>严谨管理Activity的生命周期</strong>，其实有利于开发者对项目的层级的理解，这样出事情也知道应该往哪个方向去找Bug。</p>
<p>&emsp;&emsp;在产品级的开发过程中，Activity要比我们上面说的复杂得多。在初学的时候，按照这样说的去理解Activity，可以更好的理解Android这一套庞大的体系。希望对同学们有所帮助。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 学习 </tag>
            
            <tag> 分享 </tag>
            
            <tag> Activity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android学习经验分享·2】入坑到入土线路规划]]></title>
      <url>/wifi9984.github.io/2017/08/02/android-learing-route/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;续坑（刚开始产量比较高，以后可能就拖更了）。</p>
<p>&emsp;&emsp;如果你是一个刚入坑Android（或者说刚入坑移动端开发）的fresher，<strong>规划好适合自己的学习路线能够节省不少的时间和精力</strong>。</p>
<p>&emsp;&emsp;以我个人为例，我利用学业之余的时间零碎地学习一些结构性不强的知识，至于网上的课程，都是用较长的时间以章为单位去学习的。下面不妨把学习过程中需要接触到的知识点罗列一下（可能不完整）。</p>
<a id="more"></a>
<p>&emsp;&emsp;<strong>1、Java代码</strong>。学习Java语言就像我们在学校学习英语一样，需要持久的敲代码练习，需要把课程的小节联系起来学习。如果是0基础，Java是你接触的第一种高级语言的话，一星期固定安排几天去学习是不靠谱的，很容易学了新的忘了前面的。我个人建议，如果短期内你只打算把Java用在Android开发上，结合项目一边完善项目代码一边学习Java是比较高效的。这样学习的优势就是很容易上手Android。注意，可能仅仅是Android。因为Java的用途非常广泛，结合APP项目学习Java基本上不会涉及底层的操作，如果以后还要把Java用在其他领域的话，到时候还得再深入学习Java语言。在Android里，你可以按住ctrl键，单击一些类名函数名查看其源码，当你领悟了Java神奇的继承以及Android里面的各种继承关系，你就能在.java文件里面自由发挥了。</p>
<p>&emsp;&emsp;<strong>2、Android Layout布局</strong>。Layout布局文件用来构建APP的外表，与web开发的前端有点类似。Layout文件的编写用到的是XML，XML是可拓展性标记语言，不仅仅是布局文件，Manifest清单文件也是用XML编写的。回到布局，学习布局的话，我建议刚开始先尝试自定义一些基础控件，比如Button，TextView，EditText，RadioButton，ImageView之类的，掌握控件属性的设置，记一记英文单词。然后对照开发者文档或者学习书上的介绍，从简单的LinearLayout，RelativeLayout，慢慢摸索Android布局的实现方法（gravity啊，margin啊，padding啊这些位置相关的东西）。刚开始也许会出现IDE里面呈现的画面和真机调试不符，可能写好XML跳到design看预览再跳回来发现多了absolute X/Y属性一脸懵逼。这些都是没有定义好控件与Layout（可以理解为控件的容器）的依赖关系所导致的，看看书对照一下实例代码和自己写的代码就懂了。至于自定义控件、高级控件、组合控件这些骚操作，初学的时候还是少碰的好，什么时候觉得简单控件玩熟透了，Java类的继承关系也理得差不多了，Layout文件也写得挺6了，再去尝试一下吧。例如v4,v7控件，能帮助你快速实现原生风格Material Design的设计。</p>
<p>&emsp;&emsp;——分割线—–</p>
<p>&emsp;&emsp;以下是零碎的知识点</p>
<p>&emsp;&emsp;3、Manifest的各种操作</p>
<p>&emsp;&emsp;4、drawable文件夹下.xml文件的奥秘：selector,shape…….</p>
<p>&emsp;&emsp;5、string/dimens/color/style各种value的设置，减少布局修改值之后在控件属性里找一处改一处的情况</p>
<p>&emsp;&emsp;6、APK打包，调试/签名发布，debug/release的各种事儿</p>
<p>&emsp;&emsp;7、build.gradle(APP:xxx)的配置</p>
<p>&emsp;&emsp;8、针对Android设备的UI设计</p>
<p>&emsp;&emsp;9、Activity、Fragment的相关知识（很重要！）</p>
<p>&emsp;&emsp;——分割线—–</p>
<p>&emsp;&emsp;以下是进阶路线</p>
<p>&emsp;&emsp;10、让APP接入网络（也涉及服务器端开发）</p>
<p>&emsp;&emsp;11、学习使用一些API接口，比如支付宝，高德地图….</p>
<p>&emsp;&emsp;12、像市场上的优质APP案例学习UI/UX设计</p>
<p>&emsp;&emsp;13、学习使用调试工具，优化APP性能</p>
<p>&emsp;&emsp;14、上架并开始APP的更新维护路程（入土成功）</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 学习 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Andorid学习经验分享·1】刚入坑的时候那些令人窒息的操作]]></title>
      <url>/wifi9984.github.io/2017/08/01/android-start/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;续坑。</p>
<p>&emsp;&emsp;这篇讲一讲我自己还是一个刚下定决心入坑Android的小白的时候碰到的种种问题。</p>
<a id="more"></a>
<h4 id="搭建Java开发环境"><a href="#搭建Java开发环境" class="headerlink" title="搭建Java开发环境"></a>搭建Java开发环境</h4><p>&emsp;&emsp;一开始最头疼的问题就是<strong>开发环境</strong>的搭建了，第一步肯定是从<strong>JDK</strong>的安装开始，啊不，从下载开始。目前最新的JDK版本为1.8(是JDK不是JRE，JRE只是Java运行环境，JDK才是开发包)，在官网选择win x64的版本下载就可以了（32位的机子应该淘汰了）。下载安装后JDK是不能用的，因为需要配置<strong>环境变量</strong>。当时网上Andorid学习资源少之又少，连JDK如何配置都是在IDE报错之后才慢慢学会的。JDK安装最头疼的点就是环境变量的配置了，少打一个分号什么的都会报错。好在现在Windows 10配置环境变量只需增加条目即可，要检验JDK是否安装正确，不用按网上说的输命令测试，只要看看打开Android Studio时是否出现JDK错误就行了（好耿直的方法）。如果你玩过MC（我的世界），那么JDK环境变量配置应该不是个问题。</p>
<h4 id="安装IDE-Android-Studio"><a href="#安装IDE-Android-Studio" class="headerlink" title="安装IDE(Android Studio)"></a>安装IDE(Android Studio)</h4><p>&emsp;&emsp;Android Studio的下载和安装都不是啥事儿（运行exe在安装目录\bin\studio64.exe）。但是首次打开就能碰上一堆麻烦。比如说，第一次运行，Android Studio会要求你设置<strong>代理（Proxy）</strong>来访问相关的资源链接（Google嘛，你懂的），我用的是ss代理所以配置<strong>代理地址127.0.0.1端口1080</strong>（即使用本机的代理）（考虑到现在ss不给搜。。。先留个方法在这里）然后是选择主题之类的一些个性化设置，英语功底可以的话就很轻松了。然后第一次运行就会下载SDK。主界面的各种操作也是很简单直观，自己体会就OK了。</p>
<h4 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h4><p>&emsp;&emsp;然后还有一个问题就是SDK，SDK全称Software Development Kit（软件开发包），Android SDK通过<strong>SDK Manager</strong>来管理，同样也是<strong>需要代理</strong>的。没有科学上网工具的同学可以在<code>SDK Manager</code>-<code>Tools</code>-<code>Options</code>里面设置成国内的镜像站代理，并且启用HTTPS代理。Android SDK包含了各个版本的SDK以及各种Tools。首先必要的资源在第一次运行Android Studio的时候就会帮你下载好，一些可选的内容在这里讲一下：首先是你认为的开发时常用的Android版本对应的SDK，这个在新建项目的时候会让你选择一个最低运行版本，需要下载对应的SDK。在Android具体系统的SDK文件目录下，<code>system_image</code>为系统镜像，跑虚拟机用，可以不用下载。不管电脑配置咋样我还是<strong>建议用真机进行USB调试</strong>。<code>system_image</code>在<strong>AVD Manager</strong>里面配置好了就可以运行虚拟机，可以体验一下Android系统的新特性。在设定SDK安装地址的时候不允许包含空格（虽然Windows系统允许空格）。</p>
<h4 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h4><p>&emsp;&emsp;然后是一个伴随你整个入坑过程的报错源头：Gradle。Gradle是Android的构建工具，用来编译、打包、构建……创建项目、调试项目、发布APK，都会用到Gradle。IDE会自带Gradle，但是不是完整包。建议去Gradle官网下载最新版本的完整包解压到本地<code>C:\Users\admin\.gradle\wrapper\dists</code>相应版本的文件夹下，在Android Studio的<strong>setting中启用offline work</strong>，避免无法使用代理造成的各种尴尬。比如，如果你的没有代理裸连Gradle，可能在构建新项目的时候一直卡在“Gradle:build”不动。另外，当你的代码有语法错误的时候Gradle会报错，也就是要调试的话必须保证全部代码没有被红色标记。切记，在打开项目之后，要等到进度条Gradle:build完成后再去写代码。</p>
<p>&emsp;<br>&emsp;&emsp;——以上是我搭建开发环境时碰到的一些问题，如果你也碰到了或者需要提前防范，记得拿去参考。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 学习 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【前言】【Android学习经验分享】关于这系列笔记的一些事儿]]></title>
      <url>/wifi9984.github.io/2017/07/31/android-pre/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;咳咳，笔记更新从今晚开始。这一系列笔记会不定时更新。 </p>
<p>&emsp;&emsp;趁着高三长达3个半月的暑假，我决定在家搞些事情。我自己在自学Android应用程序开发，这篇笔记也算是边学边出教程吧。所以专业的知识点可能会比较粗糙。主要还是希望给<strong>真·真·真·零基础的fresher</strong>提供一些指导。不会出现大量代码，适合同学们用零碎的时间学习借鉴我的方法。希望能帮助到同学们~</p>
<a id="more"></a>
<p>&emsp;&emsp;由于之前在高中空闲时间也零零碎碎地积累了一些关于Android应用开发的知识，所以我在开始学习时就为自己制定好了学习路线。</p>
<p>&emsp;&emsp;<strong>不妨整理一下我高中积累的各种基础……</strong></p>
<h4 id="1、Java略胜于无的基础"><a href="#1、Java略胜于无的基础" class="headerlink" title="1、Java略胜于无的基础"></a>1、Java略胜于无的基础</h4><p>&emsp;&emsp;高中的我没有时间（其实就是懒）学习Java的各种概念，只是对基础语法有些了解。通俗的来讲就是看的懂代码在讲些什么但是不知道原理，所以让我自己写也只能依样画葫芦地去做。</p>
<h4 id="2、Android-Studio的基本操作"><a href="#2、Android-Studio的基本操作" class="headerlink" title="2、Android Studio的基本操作"></a>2、Android Studio的基本操作</h4><p>&emsp;&emsp;Android Studio就是一个Android集成开发环境（简称IDE）啦。关于Android Studio的各种操作以及我的一些故事应该在后面会讲到吧。。。（先挖个坑）咳咳，这是个全英文的IDE，所以……对，要有一定英语水平。</p>
<h4 id="3、Android-iOS（统称移动端）用户界面（UI）基础"><a href="#3、Android-iOS（统称移动端）用户界面（UI）基础" class="headerlink" title="3、Android/iOS（统称移动端）用户界面（UI）基础"></a>3、Android/iOS（统称移动端）用户界面（UI）基础</h4><p>&emsp;&emsp;没错，高中没怎么学习Java，倒是先去熟悉UI设计了。阅读了<a href="https://material.io/guidelines/material-design/introduction.html" target="_blank" rel="external">Material Design开发文档</a>以及苹果的<a href="https://developer.apple.com/design/" target="_blank" rel="external">iOS人机交互指南</a>（我看的是英文原版，不过貌似都有中文翻译过的版本）。这里要提一个事儿了，许多程序员代码写得6但是自己做的project的UI丑的不忍直视，我觉得是学习顺序的锅。尤其是做移动端的，Android/iOS两大饭碗的UI设计规范一定要熟悉（我不会说QQ微信微博其实都违背了Android设计原则的）。这块内容因为学的比较深入所以提的有点多……</p>
<h4 id="4、Android-API-Guides-Google霸霸提供的开发者文档"><a href="#4、Android-API-Guides-Google霸霸提供的开发者文档" class="headerlink" title="4、Android API Guides(Google霸霸提供的开发者文档)"></a>4、Android API Guides(Google霸霸提供的开发者文档)</h4><p>&emsp;&emsp;由于没钱买Mac开发iOS，我也没怎么去看iOS的知识。<a href="https://developer.android.com" target="_blank" rel="external">developer.android.com</a>自己可以去看看。可以学习到不少Google这个Android系统开发者希望我们APP开发者去做的事情（这就是所谓的‘规范’吧）。</p>
<h4 id="5、严格遵循大小写和空格！"><a href="#5、严格遵循大小写和空格！" class="headerlink" title="5、严格遵循大小写和空格！"></a>5、严格遵循大小写和空格！</h4><p>&emsp;&emsp;这是个很好的规范，从规范输入‘iPhone 7 Plus’开始。写代码的时候你会感谢这个强迫症的。</p>
<h4 id="6、一定的盲打能力。"><a href="#6、一定的盲打能力。" class="headerlink" title="6、一定的盲打能力。"></a>6、一定的盲打能力。</h4><p>&emsp;&emsp;这个并不是必须的，只是打字效率高也算是一种生产力吧。</p>
<p>&emsp; </p>
<p>&emsp;&emsp;大概也就这些吧，看上去挺少的，但是零零碎碎的积累这些的效果似乎比一次性课程学习要来得有效。</p>
<p>&emsp;&emsp;看到这里先别慌，这篇笔记是给<strong>真·真·真·零基础</strong>的同学写的。我的学习经验只是作为一个导向。（不过仔细一想我上面提到的一些东西是网上的教程没有的哦）</p>
<p>&emsp;&emsp;嗯，今天晚上就这样起个头吧。现在我白天在学习，晚上睡前这几个小时用来写写笔记，对我自己而言也是知识的复习。行，给自己加个油，明天开始挖坑/填坑。</p>
<p>&emsp;&emsp;——2017-7-31</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 学习 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
